        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "test_helpers.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include "rngs.h"
        -:    8:#include <stdlib.h>
        -:    9:
        -:   10:
        5:   11:int main() {
        -:   12:    int i;
        5:   13:    int seed = 1000;
        5:   14:    int numPlayers = 4;
        -:   15:    int p, r;
        5:   16:    int initDeckCounts[numPlayers];
        5:   17:    int initHandCounts[numPlayers];
        -:   18:    int expectedHandCount, expectedDeckCount;
        5:   19:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   20:               , remodel, smithy, village, baron, great_hall};
        -:   21:    struct gameState G;
        5:   22:    printf("TESTING adventurer card:\n");
        5:   23:    printf("With normal start deck:\n");
        5:   24:    r = initializeGame(numPlayers, k, seed, &G);
        -:   25:    
       25:   26:    for(i = 0; i < numPlayers; ++i) {
       20:   27:        initDeckCounts[i] = G.deckCount[i];
       20:   28:        initHandCounts[i] = G.handCount[i];
        -:   29:    }
        5:   30:    G.hand[0][G.handCount[0]] = adventurer;
        5:   31:    playCard(G.handCount[0], -1, -1, -1, &G);
       25:   32:    for(i = 0; i < numPlayers; ++i) {
       20:   33:        if(i == 0) {
        5:   34:            expectedHandCount = initHandCounts[i] + 2;
        5:   35:            expectedDeckCount = initDeckCounts[i] - 2;
        -:   36:        }
        -:   37:        else {
       15:   38:            expectedHandCount = initHandCounts[i];
       15:   39:            expectedDeckCount = initDeckCounts[i];
        -:   40:        }
       20:   41:        printf("Player %d: Expected deck count %d (got %d).", i, expectedDeckCount, G.deckCount[i]);
       20:   42:        assertTrue(expectedDeckCount == G.deckCount[i]);
       20:   43:        printf("Player %d: Expected hand count %d (got %d).", i, expectedHandCount, G.handCount[i]);
       20:   44:        assertTrue(expectedHandCount == G.handCount[i]);
        -:   45:
        -:   46:
        -:   47:    }
        5:   48:    return 0;
        -:   49:}
